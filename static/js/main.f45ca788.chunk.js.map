{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/Header.js","components/pages/About.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/pages/NotFound.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","delete","name","email","phone","className","onClick","style","cursor","bind","float","color","to","margin","Contacts","Fragment","key","Header","branding","href","defaultProps","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","onContactChange","e","target","onSubmit","preventDefault","newContact","uuid","post","history","push","EditContact","updContact","match","params","put","Test","title","fetch","then","response","json","App","exact","path","component","About","NotFound","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f45ca788.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"DELETE_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.filter(\r\n          (contact) => contact.id !== action.payload\r\n        ),\r\n      };\r\n    case \"ADD_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contacts: [action.payload, ...state.contacts],\r\n      };\r\n    case \"UPDATE_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.map((contact) =>\r\n          contact.id === action.payload.id\r\n            ? (contact = action.payload)\r\n            : contact\r\n        ),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport class Provider extends Component {\r\n  state = {\r\n    contacts: [],\r\n    dispatch: (action) => {\r\n      this.setState((state) => reducer(state, action));\r\n    },\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const res = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\r\n\r\n    this.setState({ contacts: res.data });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Context.Provider value={this.state}>\r\n        {this.props.children}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Consumer } from \"../../context\";\r\n\r\nclass Contact extends Component {\r\n  state = {\r\n    showContactInfo: false,\r\n  };\r\n\r\n  onDeleteClick = async (id, dispatch) => {\r\n    await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n\r\n    dispatch({ type: \"DELETE_CONTACT\", payload: id });\r\n  };\r\n  render() {\r\n    const { id, name, email, phone } = this.props.contact;\r\n    const { showContactInfo } = this.state;\r\n    return (\r\n      <Consumer>\r\n        {(value) => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div className=\"card card-body mb-3\">\r\n              <h4>\r\n                {name}{\" \"}\r\n                <i\r\n                  onClick={() =>\r\n                    this.setState({\r\n                      showContactInfo: !this.state.showContactInfo,\r\n                    })\r\n                  }\r\n                  className=\"fas fa-sort-down\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                />{\" \"}\r\n                <i\r\n                  onClick={this.onDeleteClick.bind(this, id, dispatch)}\r\n                  className=\"fas fa-times\"\r\n                  style={{ cursor: \"pointer\", float: \"right\", color: \"red\" }}\r\n                />\r\n                <Link to={`contact/edit/${id}`}>\r\n                  <i\r\n                    className=\"fas fa-pencil-alt\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                      float: \"right\",\r\n                      color: \"black\",\r\n                      margin: \"0.5rem\",\r\n                    }}\r\n                  />\r\n                </Link>\r\n              </h4>\r\n              {showContactInfo ? (\r\n                <ul className=\"list-group\">\r\n                  <li className=\"list-group-item\">Email: {email} </li>\r\n                  <li className=\"list-group-item\">Phone: {phone} </li>\r\n                </ul>\r\n              ) : null}\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nContact.propTypes = {\r\n  contact: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Contact;\r\n","import React, { Component } from \"react\";\r\nimport Contact from \"./Contact\";\r\nimport { Consumer } from \"../../context\";\r\n\r\nclass Contacts extends Component {\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {(value) => {\r\n          const { contacts } = value;\r\n          return (\r\n            <React.Fragment>\r\n              {contacts.map((contact) => (\r\n                <Contact key={contact.id} contact={contact} />\r\n              ))}\r\n            </React.Fragment>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contacts;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n  const { branding } = props;\r\n  return (\r\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n      <div className=\"container\">\r\n        <a href=\"/\" className=\"navbar-brand\">\r\n          {branding}\r\n        </a>\r\n        <div>\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item\">\r\n              <Link to=\"/\" className=\"nav-link\">\r\n                <i className=\"fas fa-home\"> Home </i>\r\n              </Link>\r\n              <Link to=\"/contact/add\" className=\"nav-link\">\r\n                <i className=\"fas fa-plus\"> Add </i>\r\n              </Link>\r\n              <Link to=\"/about\" className=\"nav-link\">\r\n                <i className=\"fas fa-question\"> About </i>\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nHeader.defaultProps = {\r\n  branding: \"My App\",\r\n};\r\n\r\nHeader.propTypes = {\r\n  branding: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4\">About Contact Manager</h1>\r\n      <p className=\"lead\">Simple app to manage contacts</p>\r\n      <p className=\"text-secondary\">Version 1.0.0</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classnames from \"classnames\";\r\nconst TextInputGroup = ({\r\n  label,\r\n  name,\r\n  value,\r\n  placeholder,\r\n  type,\r\n  onChange,\r\n  error,\r\n}) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        type={type}\r\n        name={name}\r\n        className={classnames(\"form-control form-control-lg\", {\r\n          \"is-invalid\": error,\r\n        })}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n      {error && <div className=\"invalid-feedback\"> {error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInputGroup.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  error: PropTypes.string,\r\n};\r\n\r\nTextInputGroup.defaultProps = {\r\n  type: \"text\",\r\n};\r\nexport default TextInputGroup;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Consumer } from \"../../context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\nimport { v1 as uuid } from \"uuid\";\r\n\r\nclass AddContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    errors: {},\r\n  };\r\n\r\n  onContactChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  onSubmit = async (dispatch, e) => {\r\n    e.preventDefault();\r\n\r\n    const { name, email, phone } = this.state;\r\n\r\n    //Check for errors\r\n    if (name === \"\") {\r\n      this.setState({ errors: { name: \"Name is required\" } });\r\n      return;\r\n    }\r\n    if (email === \"\") {\r\n      this.setState({ errors: { email: \"Email is required\" } });\r\n      return;\r\n    }\r\n    if (phone === \"\") {\r\n      this.setState({ errors: { phone: \"Phone is required\" } });\r\n      return;\r\n    }\r\n\r\n    const newContact = {\r\n      id: uuid(),\r\n      name,\r\n      email,\r\n      phone,\r\n    };\r\n\r\n    const res = await axios.post(\r\n      \"https://jsonplaceholder.typicode.com/users\",\r\n      newContact\r\n    );\r\n    dispatch({ type: \"ADD_CONTACT\", payload: res.data });\r\n\r\n    //Clearing the data from input fields after adding the contact\r\n    this.setState({ name: \"\", email: \"\", phone: \"\", errors: {} });\r\n\r\n    this.props.history.push(\"/\");\r\n  };\r\n  render() {\r\n    const { name, email, phone, errors } = this.state;\r\n    return (\r\n      <Consumer>\r\n        {(value) => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div>\r\n              <div className=\"card mb-3\">\r\n                <div className=\"card-header\">Add Contact</div>\r\n                <div className=\"card-body\">\r\n                  <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                    <TextInputGroup\r\n                      label=\"Name\"\r\n                      name=\"name\"\r\n                      placeholder=\"Enter Name..\"\r\n                      value={name}\r\n                      onChange={this.onContactChange}\r\n                      error={errors.name}\r\n                    />\r\n                    <TextInputGroup\r\n                      label=\"Email\"\r\n                      name=\"email\"\r\n                      type=\"email\"\r\n                      placeholder=\"Enter Email..\"\r\n                      value={email}\r\n                      onChange={this.onContactChange}\r\n                      error={errors.email}\r\n                    />\r\n                    <TextInputGroup\r\n                      label=\"Phone\"\r\n                      name=\"phone\"\r\n                      placeholder=\"Enter Phone..\"\r\n                      value={phone}\r\n                      onChange={this.onContactChange}\r\n                      error={errors.phone}\r\n                    />\r\n                    <input\r\n                      type=\"submit\"\r\n                      value=\"Add Contact\"\r\n                      className=\"btn btn-light btn-block\"\r\n                    />\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddContact;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Consumer } from \"../../context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\nimport { v1 as uuid } from \"uuid\";\r\n\r\nclass EditContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    errors: {},\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const { id } = this.props.match.params;\r\n    const res = await axios.get(\r\n      `https://jsonplaceholder.typicode.com/users/${id}`\r\n    );\r\n\r\n    const contact = res.data;\r\n\r\n    this.setState({\r\n      name: contact.name,\r\n      email: contact.email,\r\n      phone: contact.phone,\r\n    });\r\n  }\r\n  onContactChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  onSubmit = async (dispatch, e) => {\r\n    e.preventDefault();\r\n\r\n    const { name, email, phone } = this.state;\r\n\r\n    //Check for errors\r\n    if (name === \"\") {\r\n      this.setState({ errors: { name: \"Name is required\" } });\r\n      return;\r\n    }\r\n    if (email === \"\") {\r\n      this.setState({ errors: { email: \"Email is required\" } });\r\n      return;\r\n    }\r\n    if (phone === \"\") {\r\n      this.setState({ errors: { phone: \"Phone is required\" } });\r\n      return;\r\n    }\r\n\r\n    const updContact = {\r\n      name,\r\n      email,\r\n      phone,\r\n    };\r\n\r\n    const { id } = this.props.match.params;\r\n\r\n    const res = await axios.put(\r\n      `https://jsonplaceholder.typicode.com/users/${id}`,\r\n      updContact\r\n    );\r\n\r\n    dispatch({ type: \"UPDATE_CONTACT\", payload: res.data });\r\n\r\n    //Clearing the data from input fields after adding the contact\r\n    this.setState({ name: \"\", email: \"\", phone: \"\", errors: {} });\r\n\r\n    this.props.history.push(\"/\");\r\n  };\r\n  render() {\r\n    const { name, email, phone, errors } = this.state;\r\n    return (\r\n      <Consumer>\r\n        {(value) => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div>\r\n              <div className=\"card mb-3\">\r\n                <div className=\"card-header\">Edit Contact</div>\r\n                <div className=\"card-body\">\r\n                  <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                    <TextInputGroup\r\n                      label=\"Name\"\r\n                      name=\"name\"\r\n                      placeholder=\"Enter Name..\"\r\n                      value={name}\r\n                      onChange={this.onContactChange}\r\n                      error={errors.name}\r\n                    />\r\n                    <TextInputGroup\r\n                      label=\"Email\"\r\n                      name=\"email\"\r\n                      type=\"email\"\r\n                      placeholder=\"Enter Email..\"\r\n                      value={email}\r\n                      onChange={this.onContactChange}\r\n                      error={errors.email}\r\n                    />\r\n                    <TextInputGroup\r\n                      label=\"Phone\"\r\n                      name=\"phone\"\r\n                      placeholder=\"Enter Phone..\"\r\n                      value={phone}\r\n                      onChange={this.onContactChange}\r\n                      error={errors.phone}\r\n                    />\r\n                    <input\r\n                      type=\"submit\"\r\n                      value=\"Edit Contact\"\r\n                      className=\"btn btn-light btn-block\"\r\n                    />\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditContact;\r\n","import React, { Component } from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4\">\r\n        <span className=\"text-danger\"> 404 Page Not Found</span>\r\n      </h1>\r\n      <p className=\"lead\">Sorry, that page does not exist</p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nclass Test extends Component {\r\n  state = {\r\n    id: \",\",\r\n    title: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/todos/1\")\r\n      .then((response) => response.json())\r\n      .then((data) =>\r\n        this.setState({\r\n          title: data.title,\r\n          id: data.id,\r\n        })\r\n      );\r\n  }\r\n  render() {\r\n    const { id, title } = this.state;\r\n    return (\r\n      <div>\r\n        <h1>{id}</h1>\r\n        <p>{title}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Test;\r\n","import React, { Component } from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport Contacts from \"./components/contacts/Contacts\";\nimport Header from \"./components/layout/Header\";\nimport About from \"./components/pages/About\";\nimport AddContact from \"./components/contacts/AddContact\";\nimport EditContact from \"./components/contacts/EditContact\";\nimport NotFound from \"./components/pages/NotFound\";\nimport Test from \"./components/test/Test\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { Provider } from \"./context\";\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <Router>\n          <div className=\"App\">\n            <Header branding=\"Contact Manager\" />\n            <div className=\"container\">\n              <Switch>\n                <Route exact path=\"/\" component={Contacts} />\n                <Route exact path=\"/contact/add\" component={AddContact} />\n                <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n                <Route exact path=\"/about\" component={About} />\n                <Route exact path=\"/test\" component={Test} />\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n//serviceWorker();\n"],"sourceRoot":""}